# 두 개의 파일을 합칠 때 필요한 비용(시간 등)이 두 파일 크기의 합이라고 가정할 때,
# 최종적인 한 개의 파일을 완성하는데 필요한 비용의 총 합을 계산하시오.
#
# 예를 들어, C1, C2, C3, C4가 연속적인 네 개의 장을 수록하고 있는 파일이고,
# 파일 크기가 각각 40, 30, 30, 50 이라고 하자. 이 파일들을 합치는 과정에서,
# 먼저 C2와 C3를 합쳐서 임시파일 X1을 만든다. 이때 비용 60이 필요하다.
# 그 다음으로 C1과 X1을 합쳐 임시파일 X2를 만들면 비용 100이 필요하다.
# 최종적으로 X2와 C4를 합쳐 최종파일을 만들면 비용 150이 필요하다.
# 따라서, 최종의 한 파일을 만드는데 필요한 비용의 합은 60+100+150=310 이다.
# 다른 방법으로 파일을 합치면 비용을 줄일 수 있다. 먼저 C1과 C2를 합쳐
# 임시파일 Y1을 만들고, C3와 C4를 합쳐 임시파일 Y2를 만들고, 최종적으로
# Y1과 Y2를 합쳐 최종파일을 만들 수 있다. 이때 필요한 총 비용은 70+80+150=300 이다.
#
# 소설의 각 장들이 수록되어 있는 파일의 크기가 주어졌을 때,
# 이 파일들을 하나의 파일로 합칠 때 필요한 최소비용을 계산하는 프로그램을 작성하시오.



# 방법1
import sys
input = sys.stdin.readline

T = int(input())

for _ in range(T):
    K = int(input())
    files = [0] + list(map(int, input().split()))

    # 누적합
    S = [0 for _ in range(K + 1)]
    for i in range(1, K + 1):
        S[i] = S[i - 1] + files[i]

    # DP[i][j] : i에서 j까지 합치는데 필요한 최소 비용
    # DP[i][k] + DP[k+1][j] + sum(files[i] ~ files[j])
    DP = [[0] * (K + 1) for _ in range(K + 1)]
    for i in range(2, K + 1):  # 부분 파일의 길이
        for j in range(1, K + 2 - i):  # 시작점
            DP[j][j + i - 1] = min([DP[j][j + k] + DP[j + k + 1][j + i - 1] for k in range(i - 1)]) + (
                        S[j + i - 1] - S[j - 1])

    print(DP[1][K])

